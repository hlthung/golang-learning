package cipher

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

const (
	developmentEncryptionStringKey = "00000000000000000000000000000000" // 32 length
	emptyString                    = ""
	testString                     = "hello"
	weirdCharsString               = `
		‚ô† ‚ô£ ‚ô• ‚ô¶ ‚Üê ‚Üë ‚Äç ‚Üí ‚Üì ‚Üî ¬´ ¬ª ‚Äπ ‚Ä∫ ‚óä
		¬° ¬ø ‚Ç¨ ¬£ ¬§ ¬• ¬¢ ‚Ä∞ ¬∂ ‚Äú ‚Äù ‚Äû ‚Äå ¬¶ ‚Ä° ‚Ä† ¬ß ¬© ‚Ñ¢ ¬Æ ¬π ¬≤ ¬≥ ¬º ¬Ω ¬æ
		¬∑ ‚Ä¢ ¬™ ¬∫ ¬® √ó √∑ ‚àí ‚àö ‚àû ‚à© ‚à´ ¬± ¬¨ ~ ‚âà ‚â† ‚â° ‚óä √∏ √ò ‚â§ ‚â•
		Œî Œ© Œ± Œ≤ œÄ ¬µ √∞ ‚àÇ ‚àè ‚àë ∆í
		√Ü √á √ê √ë √û √ü√üŒ≤ √¶ √ß √∞ √± √∏ √æ
		√Ä √Å √Ç √É √Ñ √Ö √à √â √ä √ã √å √ç √é √è √í √ì √î √ï √ñ √ò √ô √ö √õ √ú √ù
		√† √° √¢ √£ √§ √• √® √© √™ √´ √¨ √≠ √Æ √Ø √≤ √≥ √¥ √µ √∂ √π √∫ √ª √Ω √ø
		Œû Œæ
		Œ¶œÜ Phi = Golden Ratio
		œÑ tau = Golden Ratio
		–ê –ë –í –ì –î –ï –Å –ñ –ó –ò –ô –ö –õ –ú –ù –û
		√Å √° √Ç √¢ ¬¥ √Ü √¶ √Ä √† ‚Ñµ Œë Œ± & ‚àß
		Ê±âÂ≠ó
		üòä üçî
	`
)

func GetOpts(key string, backupKeys []string) Options {
	keys := make([][]byte, len(backupKeys))
	for i, v := range backupKeys {
		keys[i] = []byte(v)
	}
	opts := Options{
		EncryptionKey:        []byte(key),
		EncryptionBackupKeys: keys,
	}
	return opts
}

func getNewAESEncryptionService(developmentEncryptionStringKey string) *AESEncryptionServiceV1 {
	aesService, _ := newAESEncryptionServiceV1(GetOpts(developmentEncryptionStringKey, nil))
	return aesService
}

func getNewAESEncryptionMultiKeysService(keys []string) *AESEncryptionServiceV1 {
	aesService, _ := newAESEncryptionServiceV1(GetOpts("1230000~random-key~0000000000000", keys))
	return aesService
}

func TestBasicEncryptAndDecryptByteArray(t *testing.T) {
	aesEncryptionService := getNewAESEncryptionService(developmentEncryptionStringKey)
	// cipher string
	encryptedBytes, _ := aesEncryptionService.Encrypt([]byte(testString))
	// decrypt string back to what it was
	decryptedBytes, _ := aesEncryptionService.Decrypt(encryptedBytes)
	assert.Equal(t, []byte(testString), decryptedBytes)
}

func TestHandleEmptyStringEncryptAndDecryptString(t *testing.T) {
	aesEncryptionService := getNewAESEncryptionService(developmentEncryptionStringKey)
	// cipher string
	encryptedBytes, err := aesEncryptionService.Encrypt([]byte(emptyString))
	assert.Equal(t, err, nil)

	// decrypt string back to what it was
	decryptedString, err := aesEncryptionService.Decrypt(encryptedBytes)
	assert.Equal(t, err, nil)
	assert.Equal(t, []byte(emptyString), decryptedString)
}

func TestCanDecryptOnNewAesInstance(t *testing.T) {
	encryptedBytes := []byte("csLdzmyY8H7-iGXVWCWKEQAETs1gUFhqBdxNH8BG_raM") // "hello" string encrypted with developmentEncryptionStringKey
	aesEncryptionService := getNewAESEncryptionService(developmentEncryptionStringKey)
	decryptedBytes, _ := aesEncryptionService.Decrypt(encryptedBytes)
	assert.Equal(t, testString, string(decryptedBytes))
}

func TestCanDecryptOnNewAesInstanceByteArray(t *testing.T) {
	encryptedString := "csLdzmyY8H7-iGXVWCWKEQAETs1gUFhqBdxNH8BG_raM" // "hello" string encrypted with developmentEncryptionStringKey
	aesEncryptionService := getNewAESEncryptionService(developmentEncryptionStringKey)
	decryptedString, _ := aesEncryptionService.Decrypt([]byte(encryptedString))
	assert.Equal(t, testString, string(decryptedString))
}

func TestWeirdCharsEncryptAndDecryptByteArray(t *testing.T) {
	aesEncryptionService := getNewAESEncryptionService(developmentEncryptionStringKey)
	// cipher string
	encryptedBytes, _ := aesEncryptionService.Encrypt([]byte(weirdCharsString))
	// decrypt string back to what it was
	decryptedBytes, _ := aesEncryptionService.Decrypt(encryptedBytes)
	assert.Equal(t, []byte(weirdCharsString), decryptedBytes)
}

func TestShouldHandleEmptyBytesDecrypt(t *testing.T) {
	aesEncryptionService := getNewAESEncryptionService(developmentEncryptionStringKey)
	// decrypt string back to what it was
	decryptedString, err := aesEncryptionService.Decrypt([]byte(emptyString))
	assert.Equal(t, err, nil)
	assert.Equal(t, decryptedString, []byte(emptyString))
}

func TestEncryptAndDecryptWithMultipleKeysByteArraySuccess(t *testing.T) {
	keys := []string{developmentEncryptionStringKey, "4560000~random-key~0000000000000"}
	aesEncryptionService := getNewAESEncryptionMultiKeysService(keys)
	encryptedBytes := []byte("csLdzmyY8H7-iGXVWCWKEQAETs1gUFhqBdxNH8BG_raM") // "hello" string encrypted with developmentEncryptionStringKey
	decryptedBytes, _ := aesEncryptionService.Decrypt(encryptedBytes)
	assert.Equal(t, testString, string(decryptedBytes))
}

func TestEncryptAndDecryptWithMultipleKeysByteArrayFailed(t *testing.T) {
	keys := []string{"7890000~random-key~0000000000000", "4560000~random-key~0000000000000"}
	aesEncryptionService := getNewAESEncryptionMultiKeysService(keys)
	encryptedBytes := []byte("csLdzmyY8H7-iGXVWCWKEQAETs1gUFhqBdxNH8BG_raM") // "hello" string encrypted with developmentEncryptionStringKey
	_, err := aesEncryptionService.Decrypt(encryptedBytes)
	assert.Contains(t, err.Error(), "none of the keys matches to the encrypted payload")
}
